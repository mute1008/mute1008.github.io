<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on mute1997.github.io</title>
    <link>https://mute1997.github.io/post/</link>
    <description>Recent content in Posts on mute1997.github.io</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 19 Dec 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://mute1997.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>cross-request state pollution とは</title>
      <link>https://mute1997.github.io/post/2023-12-24-cross-request-state-pollution/</link>
      <pubDate>Tue, 19 Dec 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mute1997.github.io/post/2023-12-24-cross-request-state-pollution/</guid>
      <description>これは この記事はカンムアドベンドカレンダー24日目の記事です。最近 cross-request state pollution という脆弱性を知りました。この脆弱性について理解を深めるため、コードを書いてこの脆弱性の理解を目指します。
cross-request state pollution とは これはVue.jsのSSRにおいてサーバー側で作成したStateを他のリクエストにも利用してしまう脆弱性です。 この脆弱性によって、別のリクエストで使われたStateに含まれる情報が他のリクエストにも伝わってしまう可能性があります。
cf. https://ja.vuejs.org/guide/scaling-up/ssr#cross-request-state-pollution
実例 どのように発生するのか理解するために、実際にコードを書いてみました。
https://github.com/mute1997/crsp-demo-for-advent-calendar このアプリケーションには大きく2つのページがあります。
/ : カウンタ機能のあるページ /store : Stateを返すだけのページ このアプリケーションを使って、cross request state pollution が発生する状況を再現してみます。 以下はブラウザでの操作をコードで示したものです。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 user1 = requests.Session() user2 = requests.Session() # ユーザー1でインクリメント操作を1回行う ... user1.get(&amp;#34;{}{}&amp;#34;.format(target, &amp;#34;/store&amp;#34;)) # =&amp;gt; {&amp;#39;count&amp;#39;: 1} # ユーザー2でインクリメント操作を2回行う ... user2.get(&amp;#34;{}{}&amp;#34;.format(target, &amp;#34;/store&amp;#34;)) # =&amp;gt; {&amp;#39;count&amp;#39;: 2} # ユーザー1がアクセスした後、ユーザー2のセッションでユーザー1の結果が返却されている user1.</description>
    </item>
    
    <item>
      <title>semgrep-smart-contractsをすべて読む #04 (basic-arithmetic-underflow)</title>
      <link>https://mute1997.github.io/post/2022-06-07-semgrep-smart-contracts-4/</link>
      <pubDate>Tue, 07 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://mute1997.github.io/post/2022-06-07-semgrep-smart-contracts-4/</guid>
      <description>semgrep-smart-contracts というリポジトリがあります。 これは、スマートコントラクトの脆弱性を発見するためのsemgrepルールをまとめたものです。
今回は、basic-arithmetic-underflowというルールを読んでみます。
basic-arithmetic-underflow.yaml basic-arithmetic-underflow.sol 検出ルール 検出ルールは、以下の通りです。
このルールはまだBETAであり、まだsemgrepでは検出できません。
1 2 3 4 5 6 7 8 pattern-sinks: - pattern: $Y - $X pattern-sources: - pattern-either: - pattern-inside: | function $F(..., $X, ...) external { ... } - pattern-inside: | function $F(..., $X, ...) public { ... } underflowとは solidityの特定のバージョンでは、型の下限値を超えてデクリメントをしてしまった場合、意図しない動作を誘発する恐れがあります。
例として、solidityでuint8の変数を使うことを考えます。
このuint8の変数が0のとき、デクリメントすると255になってしまいます。
1 2 uint8 balance = 0; balance--; // balance == 255 この挙動は、solidity &amp;gt;= 0.8 からデフォルトでチェックされるように修正されたそうです。
このチェックを除外してコンパイルするためには、以下のようにuncheckedという構文を利用できるようです。
1 2 3 unchecked { balance--; } RemittanceTokenでの事例 この脆弱性が存在した、RemittanceTokenというコントラクトについて解説します。</description>
    </item>
    
    <item>
      <title>semgrep-smart-contractsをすべて読む #03 (basic-reentrancy)</title>
      <link>https://mute1997.github.io/post/2022-05-12-semgrep-smart-contracts-3/</link>
      <pubDate>Thu, 12 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://mute1997.github.io/post/2022-05-12-semgrep-smart-contracts-3/</guid>
      <description>semgrep-smart-contracts というリポジトリがあります。 これは、スマートコントラクトの脆弱性を発見するためのsemgrepルールをまとめたものです。
今回は、basic-reentrancyというルールを読んでみます。
basic-reentrancy.yaml basic-reentrancy.sol 検出ルール 検出ルールは、以下の通りです。
このルールはまだBETAであり、まだsemgrepでは検出できません。
1 2 3 4 5 6 7 8 9 patterns: - pattern-either: - pattern-inside: | function $F(..., $X, ...) external { ... } - pattern-inside: | function $F(..., $X, ...) public { ... } - pattern-not-inside: | function $F(..., $X, ...) onlyOwner { ... } - pattern: $X.$M(...) Reentrancy attackとは reentrant (再入可能性) とは、ある関数の実行中に、同じ関数を実行しても安全であるという性質のことを指します。
スマートコントラクトにおいては、攻撃対象から、任意のコントラクトを呼び出し可能な場合にReentrancy attackが発生する恐れがあります。
この攻撃は、以下の論文で詳細に解説されています。
Reentrancy Vulnerability Identification in Ethereum Smart Contracts</description>
    </item>
    
    <item>
      <title>semgrep-smart-contractsをすべて読む #02 (arbitrary-low-level-call)</title>
      <link>https://mute1997.github.io/post/2022-05-04-semgrep-smart-contracts-2/</link>
      <pubDate>Wed, 04 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://mute1997.github.io/post/2022-05-04-semgrep-smart-contracts-2/</guid>
      <description>semgrep-smart-contracts というリポジトリがあります。 これは、スマートコントラクトの脆弱性を発見するためのsemgrepルールをまとめたものです。
今回は、arbitrary-low-level-callというルールを読んでみます。
arbitrary-low-level-call.yaml arbitrary-low-level-call.sol 検出ルール 検出ルールは、以下の通りです。
このルールは、betaであり、semgrepではまだ検出は出来ないようです。
1 2 3 4 5 6 7 patterns: - pattern-either: - pattern-inside: | function $F(..., $ADDR, ...) external { ... } - pattern-inside: | function $F(..., $ADDR, ...) public { ... } - pattern: $ADDR.call($DATA); この脆弱性は、引数で渡されたアドレスに対し、call関数が呼ばれた場合に検知するものです。
call関数は、アドレス型の関数で、別スマートコントラクトの関数を呼び出すためのものです。 詳細は以下のドキュメントを参照してください。 https://docs.soliditylang.org/en/develop/types.html#members-of-addresses
この脆弱性は、特定のスマートコントラクトやユーザーに対してのみ許可している操作を、攻撃者が任意で呼び出せてしまうことに問題があります。
攻撃者は、transferFromなどの送金用関数を自分のアドレスに対して利用することで、資金を盗むことが可能になります。
Li Financeでの事例 この脆弱性を悪用した攻撃が、Li Financeで発生しました。 攻撃トランザクションとエクスプロイトコードは以下の通りです。
Transaction Exploit 問題が起こったのは、swapAndStartBridgeTokensViaCBridge関数です。
この関数は、_swapDataという関数を受け取り、callDataを引数としてcallToに対して関数が呼び出されています。
1 2 3 4 5 6 7 8 9 10 11 function swapAndStartBridgeTokensViaCBridge( LiFiData memory _lifiData, LibSwap.</description>
    </item>
    
    <item>
      <title>semgrep-smart-contractsをすべて読む #01 (basic-oracle-manipulation)</title>
      <link>https://mute1997.github.io/post/2022-04-20-semgrep-smart-contracts-1/</link>
      <pubDate>Wed, 20 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://mute1997.github.io/post/2022-04-20-semgrep-smart-contracts-1/</guid>
      <description>semgrep-smart-contracts というリポジトリがあります。 これは、スマートコントラクトの脆弱性を発見するためのsemgrepルールをまとめたものです。
このリポジトリの、検出ルールと脆弱なコードを読んでいくことで、スマートコントラクトの脆弱性を学びます。今回は、以下のルールを読んでいきます。
basic-oracle-manipulation.yaml basic-oracle-manipulation.sol 検出ルール まず、semgrepのルールを理解するために、ルールを日本語として表現します。
関数内の処理であること 関数の名称が (?i)get([a-z0-9_])*price にマッチすること $X.div($Y)、もしくは$X / $Yであること $Xは以下の文字列のどれかを含むこと underlying underlyingUnit pair reserve reserve0 reserve1 $Yは.*totalSupply.*にマッチすること このルールを実行すると、以下の2つがsemgrepによって検出されます。
1 2 3 101┆ _sharePrice = totalSupply() == 0 102┆ ? underlyingUnit 103┆ : underlyingUnit.mul(balanceWithInvested()).div(totalSupply()); 1 2 355┆ ((dei.balanceOf(address(pair)) + (usdc.balanceOf(address(pair)) * 1e12)) * 356┆ 1e18) / pair.totalSupply(); ルールと、何が検出されるのかは分かったものの、これだけでは何が脆弱なのか分からないので、エクスプロイトを調べてみます。
エクスプロイト このスマートコントラクトに刺さるエクスプロイトを調べてみます。 Deus Financeというプロジェクトで、この手法を用いたハッキング被害が起こったようです。
Deus Financeなど複数のDeFiプロトコルで16億円超のハッキング被害 The Deus Hack Explained Deus Finance oracle attack event analysis DEUS post mortem GitHubにエクスプロイトがあったので、これを読んで見ることにします。</description>
    </item>
    
    <item>
      <title>RPOとOpenRedirectを用いたXSS</title>
      <link>https://mute1997.github.io/post/2021-07-21-rpo/</link>
      <pubDate>Tue, 20 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://mute1997.github.io/post/2021-07-21-rpo/</guid>
      <description>RPOとは、Gareth Heyesが提唱した脆弱性です。(http://www.thespanner.co.uk/2014/03/21/rpo/)
この脆弱性の理解のため、今回はintigritiのXSS Challengeで出題された問題の再現を行います。 この問題の詳細は以下の動画で確認できます。
上記の動画では、http://vulnerable-server//example.com/..にアクセスを行い、相対パスで読み込んでいるリソースの起点をhttp://vulnerable-server//example.comとすることで、任意のスクリプトの実行を行なっています。
http://vulnerable-server//example.com/..へのアクセスは、サーバーの仕様によりhttp://vulnerable-server/にアクセスした時と同じコンテンツが返却されます。
http://vulnerable-server/では、以下の様に相対パスでのスクリプトの読み込みを行なっているため、http://vulnerable-server//example.com/script.jsからスクリプトが読み込まれます。
1 &amp;lt;script src=script.js&amp;gt; &amp;lt;/script&amp;gt; &amp;lt;!-- http://vulnerable-server//example.com/script.js--&amp;gt; http://vulnerable-server//example.com/script.jsへのアクセスは、リダイレクトの機能が動作するため、実際にはhttp://example.com/script.jsから読み込まれます。
攻撃者はexample.comの部分を好きなドメインに書き換えてアクセスすることで、好きなドメインからスクリプトを読み込むことが可能になります。
実装してみる 今回実装する脆弱なWebサーバーは、以下の機能を有しています。
//&amp;lt;ホスト名&amp;gt;というようなアクセスでリダイレクトが可能 ex. http://vulnerable-server//example.com 正規化されたパスのコンテンツが返却される ex. http://example.com/first/.. =&amp;gt; http://example.com/ 相対パスでスクリプトの読み込みが行われている ex. &amp;lt;script src=script.js&amp;gt;&amp;lt;/script&amp;gt; Webサーバーの実装は以下の通りです。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 package main import ( &amp;#34;net/http&amp;#34; &amp;#34;log&amp;#34; &amp;#34;path&amp;#34; &amp;#34;fmt&amp;#34; ) type VulnerableHandler map[string]http.</description>
    </item>
    
    <item>
      <title>イベントハンドラでの実体参照の扱い</title>
      <link>https://mute1997.github.io/post/2020-11-07-entity-reference-in-event-handler/</link>
      <pubDate>Sat, 07 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://mute1997.github.io/post/2020-11-07-entity-reference-in-event-handler/</guid>
      <description>以下の記事を読んでいて気になったことがあるので調べてみた。
https://portswigger.net/web-security/cross-site-scripting/preventing#encode-data-on-output
気になったのは以下の部分。
1 2 3 Sometimes you&amp;#39;ll need to apply multiple layers of encoding, in the correct order. For example, to safely embed user input inside an event handler, you need to deal with both the JavaScript context and the HTML context. So you need to first Unicode-escape the input, and then HTML-encode it: &amp;lt;a href=&amp;#34;#&amp;#34; onclick=&amp;#34;x=&amp;#39;This string needs two layers of escaping&amp;#39;&amp;#34;&amp;gt;test&amp;lt;/a&amp;gt; イベントハンドラにJavaScriptを書いている所にユーザーの入力を埋め込む場合は、unicodeエスケープをしてからHTMLエンコードする必要があると書いてある。
個人的にはunicodeエスケープだけではダメなのか気になったので実験してみた。
アラートを実行するために&#39;;alert(1);&#39;を入力したことを考える。
以下がunicodeエスケープのみを行って埋め込んだ場合。
1 &amp;lt;a href=&amp;#34;#&amp;#34; onclick=&amp;#34;x=&amp;#39;&amp;amp;#x0027;&amp;amp;#x003b;alert&amp;amp;#x0028;1&amp;amp;#x0029;&amp;amp;#x003b;&amp;amp;#x0027;&amp;#39;;&amp;#34;&amp;gt;link&amp;lt;/a&amp;gt; 以下はunicodeエスケープした後にHTMLエンコードを行ったもの。</description>
    </item>
    
    <item>
      <title>スタックと呼び出し規約</title>
      <link>https://mute1997.github.io/post/2020-08-22-stack-and-calling-conventions/</link>
      <pubDate>Sat, 22 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://mute1997.github.io/post/2020-08-22-stack-and-calling-conventions/</guid>
      <description>以下の文書はx86についての説明です。
メモリ配置 メモリ配置は以下の図のようになっています。
テキストセグメントには実行されるコード、データセグメントは初期化済みのグローバル変数、bssセグメントには初期化されていないグローバル変数、ヒープセグメントは、mallocなどで動的に確保される変数が配置されます。
今回はスタックに焦点をあてて説明していきます。
スタック スタックとはメモリ上の領域の1つで、
引数の保存 ローカル変数の保存 関数呼び出し に利用されます。
スタックのアドレスは高値から低位に伸びていき、ebp, espレジスタにスタックのアドレスが保存されます。 以下の画像の様に、ebpは現在の関数のスタックの底を、espはスタックのトップを表しています。
これらのレジスタの値はpush, pop, call, retによって操作されます。
pushすると値がスタックに追加されたあとにespが4(x86_64の場合は8)だけデクリメントされ、popすると値がレジスタに読み込まれてespがインクリメントされます。
callの場合には、eipをリターンアドレスとしてpush, eipを呼び出し関数の先頭にセットします。 retすると、スタックからアドレスを取得してeipにセットします。
スタックフレーム スタックフレームは以下の様になってます。
リターンアドレスはcall命令によるもので、ebpのアドレスがあるのは、Function prologueによるものです。
Function prologue Function prologueは関数の先頭で行われる処理のことです。 実際には以下のような処理を行います。 push ebpでは、関数の終了時にebpを復元するために一旦スタックに退避しています。 mov ebp,espでは、現在のebpをespに代入することで、現在のスタックトップをベースにしています。
1 2 push ebp mov ebp,esp Function epilogue Function epilogueは関数の最後に行われる処理のことです。 実際には以下のような処理が行われています。
1 2 leave ret このleaveという命令は、
1 2 mov esp ebp pop ebp と同等の処理を行うものです。
これらは、espをebpに戻して、スタックからebpの値を復元します。 retでは、前のeipの値をスタックからポップして元のコードに戻ります。
calling convention スタックに引数を積む場合には、呼び出し規則(calling convention)と呼ばれる方法があります。 32bitバイナリでは、関数の引数は逆順にスタックに渡されます。 64bitバイナリでは、関数の引数を渡すのにスタックは使わず、レジスタを利用します。 渡される順番は以下の通りです。
rdi rsi rdx r8 r9 5個を超えるような場合には32bitバイナリと同様にスタックにプッシュされます。</description>
    </item>
    
    <item>
      <title>DirtycowのPoCを読む</title>
      <link>https://mute1997.github.io/post/2018-08-11-how-dirtycow-work/</link>
      <pubDate>Sat, 11 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://mute1997.github.io/post/2018-08-11-how-dirtycow-work/</guid>
      <description>DirtyCowについて調べたので理解するのに必要となる前提知識と一緒にPoCについての説明をまとめておきます。
rootを取ったり、REHLで動くものがありますが今回は一番基本的な、権限のないファイルに書き込むPoC(https://github.com/dirtycow/dirtycow.github.io/blob/master/dirtyc0w.c)についてまとめます。
DirtyCowについて DirtyCowはCopy on Writeの取り扱いにおいて競合状態が発生し、プライベートなメモリマッピングが破壊されるというものです。 CVEではCVE-2016-5195として管理されています。
https://jvndb.jvn.jp/ja/contents/2016/JVNDB-2016-005596.html
前提知識など mmap mmapはファイルやデバイスをメモリにマッピングするためのものです。
readやwriteを使うとカーネル空間からユーザープロセスへのコピーが発生しますが、mmapはマッピングしたアドレスを返すだけでユーザー空間へのコピーが発生しません。
そのためreadやwriteを使うよりも効率期にファイルの読み書きが可能になるようです。
&amp;ldquo;なるようです&amp;quot;と書いたのはどの場合においてもmmapのほうが早いわけではないからです。
日本語で詳しく解説されている記事があったのでどうぞ。
man mmapしてでてくる情報を簡単にまとめます。 プロトタイプ宣言は次のようになっています。
1 void *mmap(void *addr, size_t len, int prot, int flags, int fildes, off_t off); addrにはマッピングするアドレスを指定します。NULLを指定するとマッピングするアドレスをカーネルが決定してくれます。
lenにはマッピングするサイズを指定します。
protにはPROT_EXEC, PROT_READ, PROT_WRITE, PROT_NONEを指定します。それぞれ、実行可能、読み書き可能、書き込み可能、アクセス不可能を表します。
flagsには、MAP_SHARED, MAP_PRIVATE, MAP_FIXEDが指定できます。MAP_PRIVATEが指定されるとCopy on Writeでファイルがマッピングされます。
fildesにはファイルディスクリプタを指定します。
offにはファイルのオフセットを指定します。
mmapを利用した簡単なファイルを読み込むをするサンプルを書いてみました。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 #include &amp;lt;stdio.</description>
    </item>
    
  </channel>
</rss>
