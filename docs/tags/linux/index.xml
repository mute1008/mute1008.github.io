<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>linux on mute1997.github.io</title>
    <link>https://mute1997.github.io/tags/linux/</link>
    <description>Recent content in linux on mute1997.github.io</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 22 Aug 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://mute1997.github.io/tags/linux/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>スタックと呼び出し規約</title>
      <link>https://mute1997.github.io/post/2020-08-22-stack-and-calling-conventions/</link>
      <pubDate>Sat, 22 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://mute1997.github.io/post/2020-08-22-stack-and-calling-conventions/</guid>
      <description>以下の文書はx86についての説明です。
   メモリ配置  メモリ配置は以下の図のようになっています。
テキストセグメントには実行されるコード、データセグメントは初期化済みのグローバル変数、bssセグメントには初期化されていないグローバル変数、ヒープセグメントは、mallocなどで動的に確保される変数が配置されます。
今回はスタックに焦点をあてて説明していきます。
   スタック  スタックとはメモリ上の領域の1つで、
 引数の保存 ローカル変数の保存 関数呼び出し  に利用されます。
スタックのアドレスは高値から低位に伸びていき、ebp, espレジスタにスタックのアドレスが保存されます。 以下の画像の様に、ebpは現在の関数のスタックの底を、espはスタックのトップを表しています。
これらのレジスタの値はpush, pop, call, retによって操作されます。
pushすると値がスタックに追加されたあとにespが4(x86_64の場合は8)だけデクリメントされ、popすると値がレジスタに読み込まれてespがインクリメントされます。
callの場合には、eipをリターンアドレスとしてpush, eipを呼び出し関数の先頭にセットします。 retすると、スタックからアドレスを取得してeipにセットします。
   スタックフレーム  スタックフレームは以下の様になってます。
リターンアドレスはcall命令によるもので、ebpのアドレスがあるのは、Function prologueによるものです。
   Function prologue  Function prologueは関数の先頭で行われる処理のことです。 実際には以下のような処理を行います。 push ebpでは、関数の終了時にebpを復元するために一旦スタックに退避しています。 mov ebp,espでは、現在のebpをespに代入することで、現在のスタックトップをベースにしています。
1 2  push ebp mov ebp,esp      Function epilogue  Function epilogueは関数の最後に行われる処理のことです。 実際には以下のような処理が行われています。</description>
    </item>
    
  </channel>
</rss>
