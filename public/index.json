[{"categories":null,"contents":"","date":"Nov 26","permalink":"https://mute1997.github.io/articles/","tags":null,"title":"Articles"},{"categories":null,"contents":"以下の記事を読んでいて気になったことがあるので調べてみた。\nhttps://portswigger.net/web-security/cross-site-scripting/preventing#encode-data-on-output\n気になったのは以下の部分。\n1 2 3  Sometimes you\u0026#39;ll need to apply multiple layers of encoding, in the correct order. For example, to safely embed user input inside an event handler, you need to deal with both the JavaScript context and the HTML context. So you need to first Unicode-escape the input, and then HTML-encode it: \u0026lt;a href=\u0026#34;#\u0026#34; onclick=\u0026#34;x=\u0026#39;This string needs two layers of escaping\u0026#39;\u0026#34;\u0026gt;test\u0026lt;/a\u0026gt;   イベントハンドラにJavaScriptを書いている所にユーザーの入力を埋め込む場合は、unicodeエスケープをしてからHTMLエンコードする必要があると書いてある。\n個人的にはunicodeエスケープだけではダメなのか気になったので実験してみた。\nアラートを実行するために';alert(1);'を入力したことを考える。\n以下がunicodeエスケープのみを行って埋め込んだ場合。\n1  \u0026lt;a href=\u0026#34;#\u0026#34; onclick=\u0026#34;x=\u0026#39;\u0026amp;#x0027;\u0026amp;#x003b;alert\u0026amp;#x0028;1\u0026amp;#x0029;\u0026amp;#x003b;\u0026amp;#x0027;\u0026#39;;\u0026#34;\u0026gt;link\u0026lt;/a\u0026gt;   以下はunicodeエスケープした後にHTMLエンコードを行ったもの。\n1  \u0026lt;a href=\u0026#34;#\u0026#34; onclick=\u0026#34;x=\u0026#39;\u0026amp;#38;\u0026amp;#35;x0027\u0026amp;#59;\u0026amp;#38;\u0026amp;#35;x003b\u0026amp;#59;alert\u0026amp;#38;\u0026amp;#35;x0028\u0026amp;#59;1\u0026amp;#38;\u0026amp;#35;x0029\u0026amp;#59;\u0026amp;#38;\u0026amp;#35;x003b\u0026amp;#59;\u0026amp;#38;\u0026amp;#35;x0027\u0026amp;#59;\u0026#39;;\u0026#34;\u0026gt;link\u0026lt;/a\u0026gt;   unicodeエスケープとHTMLエンコードには以下の関数を用いた。\n1 2 3 4 5  function htmlEncode(str){ return String(str).replace(/[^\\w. ]/gi, function(c){ return \u0026#39;\u0026amp;#\u0026#39;+c.charCodeAt(0)+\u0026#39;;\u0026#39;; }); }   1 2 3 4 5  function jsEscape(str){ return String(str).replace(/[^\\w. ]/gi, function(c){ return \u0026#39;\u0026amp;#x\u0026#39;+(\u0026#39;0000\u0026#39;+c.charCodeAt(0).toString(16)).slice(-4)+\u0026#39;;\u0026#39;; }); }   これらをブラウザで開いてからクリックすると、前者はアラートが実行され、後者は何も起こらない。\nこれはイベントハンドラでのみ起こるのか調べるために、unicodeエスケープのみを行った\u0026lt;img src=x onerror=alert(1)\u0026gt;をページに書き込んで開いてみる。\n1  \u0026amp;#x003c;img src\u0026amp;#x003d;x onerror\u0026amp;#x003d;alert\u0026amp;#x0028;1\u0026amp;#x0029;\u0026amp;#x003e;   \u0026lt;img src=x onerror=alert(1)\u0026gt;と表示され、アラートは発火しない。\nイベントハンドラと同じJavaScriptコードがscriptタグに埋め込まれている場合を考える。\n以下のようなHTMLがサーバーによって生成される。\n1 2 3  \u0026lt;script\u0026gt; x=\u0026#39;\u0026amp;#x0027;\u0026amp;#x003b;alert\u0026amp;#x0028;1\u0026amp;#x0029;\u0026amp;#x003b;\u0026amp;#x0027;\u0026#39;; \u0026lt;/script\u0026gt;   これを開いてもアラートは実行されない。\nこれらからイベントハンドラでのみ実体参照が評価された状態でJavaScriptが実行されることがわかる。\n","date":"Nov 07","permalink":"https://mute1997.github.io/post/2020-11-07-entity-reference-in-event-handler/","tags":["security"],"title":"イベントハンドラでの実体参照の扱い"},{"categories":null,"contents":"以下の文書はx86についての説明です。\nメモリ配置 メモリ配置は以下の図のようになっています。\nテキストセグメントには実行されるコード、データセグメントは初期化済みのグローバル変数、bssセグメントには初期化されていないグローバル変数、ヒープセグメントは、mallocなどで動的に確保される変数が配置されます。\n今回はスタックに焦点をあてて説明していきます。\nスタック スタックとはメモリ上の領域の1つで、\n 引数の保存 ローカル変数の保存 関数呼び出し  に利用されます。\nスタックのアドレスは高値から低位に伸びていき、ebp, espレジスタにスタックのアドレスが保存されます。 以下の画像の様に、ebpは現在の関数のスタックの底を、espはスタックのトップを表しています。\nこれらのレジスタの値はpush, pop, call, retによって操作されます。\npushすると値がスタックに追加されたあとにespが4(x86_64の場合は8)だけデクリメントされ、popすると値がレジスタに読み込まれてespがインクリメントされます。\ncallの場合には、eipをリターンアドレスとしてpush, eipを呼び出し関数の先頭にセットします。 retすると、スタックからアドレスを取得してeipにセットします。\nスタックフレーム スタックフレームは以下の様になってます。\nリターンアドレスはcall命令によるもので、ebpのアドレスがあるのは、Function prologueによるものです。\nFunction prologue Function prologueは関数の先頭で行われる処理のことです。 実際には以下のような処理を行います。 push ebpでは、関数の終了時にebpを復元するために一旦スタックに退避しています。 mov ebp,espでは、現在のebpをespに代入することで、現在のスタックトップをベースにしています。\n1 2  push ebp mov ebp,esp   Function epilogue Function epilogueは関数の最後に行われる処理のことです。 実際には以下のような処理が行われています。\n1 2  leave ret   このleaveという命令は、\n1 2  mov esp ebp pop ebp   と同等の処理を行うものです。\nこれらは、espをebpに戻して、スタックからebpの値を復元します。 retでは、前のeipの値をスタックからポップして元のコードに戻ります。\ncalling convention スタックに引数を積む場合には、呼び出し規則(calling convention)と呼ばれる方法があります。 32bitバイナリでは、関数の引数は逆順にスタックに渡されます。 64bitバイナリでは、関数の引数を渡すのにスタックは使わず、レジスタを利用します。 渡される順番は以下の通りです。\n rdi rsi rdx r8 r9  5個を超えるような場合には32bitバイナリと同様にスタックにプッシュされます。\n","date":"Aug 22","permalink":"https://mute1997.github.io/post/2020-08-22-stack-and-calling-conventions/","tags":["linux"],"title":"スタックと呼び出し規約"},{"categories":null,"contents":"バイナリのFuzzingのようなものを、Webアプリにも適用できないだろうかと思って調べていた所見つけたのでちょっと読んでみようと思います。\n今回はアルゴリズム部分に注目して読んでみます。\nこの論文ではswaggerの静的分析を行いテストケースを生成しているらしい。\npythonっぽく書かれたアルゴリズムの疑似コードは以下の通り。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58  Inputs: swaggerspec, maxLength # Swaggerから作成したリクエストの集合 reqSet = PROCESS(swaggerspec) # リクエストシーケンスの集合 (最初は空) seqSet = {} # メインループ n = 1 while (n \u0026lt;= maxLength): seqSet = EXTEND(seqSet, reqSet) seqSet = RENDER(seqSet) n = n + 1 # 依存関係が満たされている新しいリクエストを追加することで、 # seqSet内のすべてのシーケンスを拡張する def EXTEND(seqSet, reqSet): newSeqSet = {} for seq in seqSet: for req in reqSet: if DEPENDENCIES(seq, req): newSeqSet = newSeqSet + concat(seq, req) return newSeqSet # 辞書を利用して新たに追加されたすべてのリクエストを具体化し、 # それぞれの新しいリクエストシーケンスを実行し、有効なものを保持する def RENDER(seqSet): newSeqSet = {} for seq in seqSet: req = last_request_in(seq) ~V = tuple_of_fuzzable_types_in(req) for ~v in ~V: newReq = concretize(req,~v) newSeq = concat(seq, newReq) response = EXECUTE(newSeq) if response has a valid code: newSeqSet = newSeqSet + newSeq else: log error return newSeqSet # リクエストで参照されるすべてのオブジェクトが、 # 以前のリクエストシーケンスの何らかのレスポンスによって生成されたものであることをチェックします。 def DEPENDENCIES(seq, req): if CONSUMES(req)⊆PRODUCES(seq): return True else: return False # リクエストに必要なオブジェクト def CONSUMES(req): return object_types_required_in(req) # 一連のリクエストのレスポンスで生成されたオブジェクト def PRODUCES(seq): dynamicObjects ={} for req in seq: newObjs = objects_produced_in_response_of(req) dynamicObjects = dynamicObjects + newObjs return dynamicObjects   パパっと見てみると、\n 依存関係がある場合にはseqSetにreqを追加 seqSetの最後のAPIをfuzzing 200が帰ってきたものをseqSetに追加 を繰り返しているっぽい。  REST-lerを利用する場合には以下のコードを用いるっぽい。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  from restler import requests from restler import dependencies def parse_posts(data): post_id = data[\u0026#34;id\u0026#34;] dependencies.set_var(post_id) request = requests.Request( restler_static(\u0026#34;POST\u0026#34;), restler_static(\u0026#34;/api/blog/posts/\u0026#34;), restler_static(\u0026#34;HTTP/1.1\u0026#34;), restler_static(\u0026#34;{\u0026#34;), restler_static(\u0026#34;body\u0026#34;), restler_fuzzable(\u0026#34;string\u0026#34;), restler_static(\u0026#34;POST\u0026#34;), restler_static(\u0026#34;{\u0026#34;), \u0026#39;post_send\u0026#39;: { \u0026#39;parser\u0026#39;: parse_posts, \u0026#39;dependencies\u0026#39;: [ post_id.writer(), ], } )   依存関係があるっていうのはどうやって把握してるんだろうと思ってよく読んで見ると, シーケンスの最後に返されたレスポンスを含むリクエストは依存関係があると判断されるらしい。\n例えばシーケンスの最後がPOST /api/blog/postsとかだとレスポンスにはidが入っている、リクエストボディにidが入っているリクエストは依存関係があると判断されるのかな。\nこれは実際のコード読んでみないとよくわからないなぁと思って調べていたらソースコードの公開はないらしく、悲しい。\nhttps://twitter.com/vatlidak/status/1097099793514590208?s=21\n結果この手法でGitLabのバグを22個発見したということを言っている。\nクラッシュのグルーピングや探索方法についても記述があったがそのへんはちゃんと読んでないです。 気になる人は読んでみてください。\n","date":"Aug 13","permalink":"https://mute1997.github.io/post/2020-08-13-rest-ler/","tags":["security","paper"],"title":"論文紹介: REST-ler: Automatic Intelligent REST API Fuzzing"},{"categories":null,"contents":"DirtyCowについて調べたので理解するのに必要となる前提知識と一緒にPoCについての説明をまとめておきます。\nrootを取ったり、REHLで動くものがありますが今回は一番基本的な、権限のないファイルに書き込むPoC(https://github.com/dirtycow/dirtycow.github.io/blob/master/dirtyc0w.c)についてまとめます。\nDirtyCowについて DirtyCowはCopy on Writeの取り扱いにおいて競合状態が発生し、プライベートなメモリマッピングが破壊されるというものです。 CVEではCVE-2016-5195として管理されています。\nhttps://jvndb.jvn.jp/ja/contents/2016/JVNDB-2016-005596.html\n前提知識など mmap mmapはファイルやデバイスをメモリにマッピングするためのものです。\nreadやwriteを使うとカーネル空間からユーザープロセスへのコピーが発生しますが、mmapはマッピングしたアドレスを返すだけでユーザー空間へのコピーが発生しません。\nそのためreadやwriteを使うよりも効率期にファイルの読み書きが可能になるようです。\n\u0026ldquo;なるようです\u0026quot;と書いたのはどの場合においてもmmapのほうが早いわけではないからです。\n日本語で詳しく解説されている記事があったのでどうぞ。\nman mmapしてでてくる情報を簡単にまとめます。 プロトタイプ宣言は次のようになっています。\n1  void *mmap(void *addr, size_t len, int prot, int flags, int fildes, off_t off);   addrにはマッピングするアドレスを指定します。NULLを指定するとマッピングするアドレスをカーネルが決定してくれます。\nlenにはマッピングするサイズを指定します。\nprotにはPROT_EXEC, PROT_READ, PROT_WRITE, PROT_NONEを指定します。それぞれ、実行可能、読み書き可能、書き込み可能、アクセス不可能を表します。\nflagsには、MAP_SHARED, MAP_PRIVATE, MAP_FIXEDが指定できます。MAP_PRIVATEが指定されるとCopy on Writeでファイルがマッピングされます。\nfildesにはファイルディスクリプタを指定します。\noffにはファイルのオフセットを指定します。\nmmapを利用した簡単なファイルを読み込むをするサンプルを書いてみました。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28  #include \u0026lt;stdio.h\u0026gt;#include \u0026lt;sys/mman.h\u0026gt;#include \u0026lt;sys/types.h\u0026gt;#include \u0026lt;sys/stat.h\u0026gt;#include \u0026lt;fcntl.h\u0026gt; int main(int argc, char *argv[]){ if (argc \u0026lt;= 1) { printf(\u0026#34;please specify filename\\n\u0026#34;); return 1; } int fd = open(argv[1],O_RDONLY); if (fd \u0026lt; 0) { printf(\u0026#34;file not found\\n\u0026#34;); return 1; } printf(\u0026#34;file discriptor: %d\\n\u0026#34;, fd); struct stat st; fstat(fd, \u0026amp;st); printf(\u0026#34;file size: %ld\\n\u0026#34;, st.st_size); char* map = mmap(NULL,st.st_size,PROT_READ,MAP_PRIVATE,fd,0); printf(\u0026#34;%s\\n\u0026#34;, map); return 0; }   更に詳しい情報はman mmapで得られます。\nCopy on Write Copy on Writeとは書き込みが行われるまでは元から存在するマッピングを利用し、書き込みが起こったと同時にメモリ上に新たに複製が作られるという動作のことをいいます。\nこれによってforkするたびに、メモリ上に複製を作るより効率よくメモリを利用することができます。\n書き込みによって作られた新たな複製は、他のプロセスからは見ることができません。\nここで実験のために少しコードを書いてみようと思います。\n先ほど説明したように、書き込みが行われるまでは同じマッピングを利用し、書き込みが行われるときに新たな領域が確保され、複製されます。\nプロセスのファイルマッピングは/proc/{pid}/smapsで確認することができます。\n出力はだいたいこんなのが得られます。\nSize: 4 kB KernelPageSize: 4 kB MMUPageSize: 4 kB Rss: 0 kB Pss: 0 kB Shared_Clean: 0 kB Shared_Dirty: 0 kB Private_Clean: 0 kB Private_Dirty: 0 kB Referenced: 0 kB Anonymous: 0 kB LazyFree: 0 kB AnonHugePages: 0 kB ShmemPmdMapped: 0 kB Shared_Hugetlb: 0 kB Private_Hugetlb: 0 kB Swap: 0 kB SwapPss: 0 kB Locked: 0 kB VmFlags: rd mr mw me これを利用してみます。\n先程の説明通りなら、書き込みを行うまでは親プロセスと子プロセスのメモリマッピングは同じ、親プロセスか子プロセスどちらかで書き込むとメモリマッピングが変わるはずです。\n次のようなコード書いて実験してみます。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78  #include \u0026lt;stdio.h\u0026gt;#include \u0026lt;stdlib.h\u0026gt;#include \u0026lt;stdint.h\u0026gt;#include \u0026lt;fcntl.h\u0026gt;#include \u0026lt;unistd.h\u0026gt;#include \u0026lt;string.h\u0026gt;#include \u0026lt;errno.h\u0026gt;#include \u0026lt;sys/mman.h\u0026gt;#include \u0026lt;sys/types.h\u0026gt;#include \u0026lt;sys/stat.h\u0026gt;#include \u0026lt;sys/wait.h\u0026gt; #define IS_WRITE 1  int fd; struct stat st; void *map; int main(int argc, char *argv[]){ if (argc \u0026lt;= 1) { printf(\u0026#34;please specify filename\\n\u0026#34;); return 1; } fd = open(argv[1],O_RDWR); if (fd \u0026lt; 0) { fprintf(stderr, \u0026#34;%s\\n\u0026#34;, strerror(errno)); return 1; } fstat(fd, \u0026amp;st); // MAP_PRIVATE(copy on write)でマッピング  map = (char *)mmap(NULL,st.st_size,PROT_WRITE,MAP_PRIVATE,fd,0); // 読み込み  FILE *f = fopen(\u0026#34;/dev/null\u0026#34;, \u0026#34;w\u0026#34;); fprintf(f, \u0026#34;%s\\n\u0026#34;, map); if (map == MAP_FAILED) { fprintf(stderr, \u0026#34;%s\\n\u0026#34;, strerror(errno)); return -1; } int pid = getpid(); printf(\u0026#34;(main) pid: %d\\n\u0026#34;, pid); // -------------------  // fork  // -------------------  int status; pid = fork(); if (pid == 0) { pid = getpid(); printf(\u0026#34;(fork) pid: %d\\n\u0026#34;, pid); // 読み込み  FILE *f = fopen(\u0026#34;/dev/null\u0026#34;, \u0026#34;w\u0026#34;); fprintf(f, \u0026#34;%s\\n\u0026#34;, map); if (!IS_WRITE) sleep(100); // 書き込み  strcat(map, \u0026#34;A\u0026#34;); if (IS_WRITE) sleep(100); } wait(\u0026amp;status); // -------------------  if (munmap(map, st.st_size) == -1){ fprintf(stderr, \u0026#34;%s\\n\u0026#34;, strerror(errno)); return -1; } return 0; }   マッピングした領域に書き込む前にsleepを挟んでからコンパイルして実行します。\nsleepに入ったらcat /proc/{pid}/smaps | grep -A 20 filenameして子プロセスのマッピングをみます。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  Size: 4 kB KernelPageSize: 4 kB MMUPageSize: 4 kB Rss: 4 kB Pss: 2 kB Shared_Clean: 4 kB Shared_Dirty: 0 kB Private_Clean: 0 kB Private_Dirty: 0 kB Referenced: 4 kB Anonymous: 0 kB LazyFree: 0 kB AnonHugePages: 0 kB ShmemPmdMapped: 0 kB Shared_Hugetlb: 0 kB Private_Hugetlb: 0 kB Swap: 0 kB SwapPss: 0 kB Locked: 2 kB VmFlags: wr mr mw me ac   Shared_Cleanが4kBになってます。\n親プロセスと子プロセスで同じファイル触っているので共有されていますね。\n書き込みをしてから親プロセスのマッピングを見てみます。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  Size: 4 kB KernelPageSize: 4 kB MMUPageSize: 4 kB Rss: 4 kB Pss: 4 kB Shared_Clean: 0 kB Shared_Dirty: 0 kB Private_Clean: 0 kB Private_Dirty: 4 kB Referenced: 4 kB Anonymous: 4 kB LazyFree: 0 kB AnonHugePages: 0 kB ShmemPmdMapped: 0 kB Shared_Hugetlb: 0 kB Private_Hugetlb: 0 kB Swap: 0 kB SwapPss: 0 kB Locked: 4 kB VmFlags: wr mr mw me ac   Private_Dirtyが4kBになりましたね。\nマッピングしていたファイルが新しいプロセスのためにメモリ上に新たに複製されました。\nmadvise madviseはカーネルに、メモリのページング処理についてアドバイスを出すために使用します。\n1  int madvise(void *addr, size_t length, int advice);   addrにはアドレスを、lengthにはサイズ、adviceにはカーネルに対するアドバイスを渡します。詳細はman madviseで確認することが出来ます。\nDirtyCowではadviceにMADV_DONTNEEDが渡されています。\nこれは、しばらくは指定されたアドレスへのアクセスはなさそうなのでmmapしたメモリは一旦開放して良いということをカーネルに伝えるものです。\nこれによってmmapしたファイルは開放され、次に読み込むときは再びIOが発生し、メモリに読み込まれます。 元ファイルが削除されていた場合は0fillされます。\nPoCコードの解説 https://github.com/dirtycow/dirtycow.github.io/blob/master/dirtyc0w.c\nPoCの大まかな動作としては、mainで読み込みたいファイルをmmap, それからmadviseThread, procselfmemThreadを各スレッドで動かしています。\nmadviseThreadではmadviseをループして何度も実行、procselfmemThreadでは自分のプロセスのメモリである/proc/self/memを開き、mmapされた場所に文字列を書き込み続けています。\nこの2つの動作が連続することにより競合状態が発生し、プライベートなメモリマップであるはずのものがディスクに書き込まれてしまいます。\nこれを理解する上で重要なのはページキャッシュの動作です。\nページキャッシュの動作として、読み込みが行われると、読み込んだものはキャッシュに置かれ、書き込みが行われると、即座に書き込みは行われず、キャッシュに書き込んだ上で適当なタイミングで書き込みが行われます。Linuxカーネルではキャッシュに書き込みを行うと書き込んだページにDirty bitが立てられます。\n先ほど説明したmadviseとwriteを繰り返すと、writeを行ってからDirty bitを立てる前にmadviseによってページがディスクに書き込まれることによって、権限の無いファイルに書き込みができてしまうというわけです。\ndraw.ioで2秒くらいで書いた図によるとこんな感じです。\n最後に 本当はパッチを読んだりしてたんですがこれ以上長くなるとしんどいのでやめました。\nDirtyCowのパッチには不十分で、THPを使用している場合にはCoWを用いることなくdirty bitを立てることができるらしいですね。\n気が向いたらパッチを読みつつ不十分だった部分など解説します。\n","date":"Aug 11","permalink":"https://mute1997.github.io/post/2018-08-11-how-dirtycow-work/","tags":["security"],"title":"DirtycowのPoCを読む"},{"categories":null,"contents":"prototype pollutionとは ","date":"Aug 11","permalink":"https://mute1997.github.io/post/2021-06-23-prototype-pollution/","tags":["security"],"title":"prototype pollutionを自動で見つけてみる"},{"categories":null,"contents":"","date":"Jan 01","permalink":"https://mute1997.github.io/projects/a_project/","tags":null,"title":""}]